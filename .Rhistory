poessions[possessions$possession.length == "0:00", ]
possessions[possessions$possession.length == "0:00", ]
head(possessions[possessions$possession.length == "0:00", ])
"0:01" > "0:00"
possession[levels(possession$possession.length) <= time, ]
possessions[levels(possessions$possession.length) <= time, ]
possessions$possession.length
possessions$possession.length < "0:08"
level(possessions$possession.length) < "0:08"
levesl(possessions$possession.length) < "0:08"
levels(possessions$possession.length) < "0:08"
class(possessions$possession.length)
as.character(possessions$possession.length)
# Chunk 1
setwd("/Users/andrewtan/Projects/Sports\ Analytics/basketball-analytics")
possessions <- read.csv("box_optical_poss.csv",
header = TRUE,
sep = ",")
possessions[is.na(possessions)] <- 0
possessions = possessions[]
# Chunk 2: TeamPPP
getPPP = function(df=possessions) {
n = nrow(df)
points = sum(df$points)
ppp = points / n
return(ppp)
}
getTeamPPP = function(team_id, df=possessions) {
team = df[df$team.global.id == team_id, ]
ppp = getPPP(df=team)
return(ppp)
}
# Chunk 3: TestTeamPPP
getTeamPPP(13)
# Chunk 4: transitionPPP
getTransitionPPP = function(df=possessions, time="0:08") {
transition = df[as.character(df$possession.length) <= time, ]
ppp = getPPP(transition)
return(ppp)
}
getTeamTransitionPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getTransitionPPP(df=team)
return(ppp)
}
# Chunk 5: halfcourtPPP
getHalfCourtPPP = function(df=possessions, time="0:08") {
halfCourt = df[as.character(df$possession.length) > time, ]
ppp = getPPP(halfCourt)
return(ppp)
}
getTeamHalfCourtPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getHalfCourtPPP(df=team)
return(ppp)
}
# Chunk 6: assignment
getOpponentsDF = function(team_id, df=possessions) {
team = possessions[possessions$team.global.id == team_id, ]
gameCodes = unique(team$gamecode)
gamesDF = possessions[any(possessions$gamecode %in% gameCodes), ]
opponentsDF = gamesDF[gamesDF$team.global.id != team_id, ]
return(opponentsDF)
}
# Get Lakers Opponents
lakersOpponentsDF = getOpponentsDF(13)
# Print Values
paste("Lakers Transition PPP: ", getTeamTransitionPPP(13))
paste("Lakers Half Court PPP: ", getTeamHalfCourtPPP(13))
paste("Opponent Transition PPP: ", getTransitionPPP(lakersOpponentsDF))
paste("Opponent Half Court PPP: ", getHalfCourtPPP(lakersOpponentsDF))
paste("NBA Transition PPP: ", getTransitionPPP(possessions))
paste("NBA Half Court PPP: ", getHalfCourtPPP(possessions))
as.character(possessions$possession.length) > time
as.character(possessions$possession.length)
time
as.character(possessions$possession.length) > "0:08"
(as.character(possessions$possession.length) > "0:08")[0:6]
head(possessions)
# Chunk 1
setwd("/Users/andrewtan/Projects/Sports\ Analytics/basketball-analytics")
possessions <- read.csv("box_optical_poss.csv",
header = TRUE,
sep = ",")
possessions[is.na(possessions)] <- 0
possessions = possessions[as.character(possessions$possession.length) > "0:00"]
# Chunk 2: TeamPPP
getPPP = function(df=possessions) {
n = nrow(df)
points = sum(df$points)
ppp = points / n
return(ppp)
}
getTeamPPP = function(team_id, df=possessions) {
team = df[df$team.global.id == team_id, ]
ppp = getPPP(df=team)
return(ppp)
}
# Chunk 3: TestTeamPPP
getTeamPPP(13)
# Chunk 4: transitionPPP
getTransitionPPP = function(df=possessions, time="0:08") {
transition = df[as.character(df$possession.length) <= time, ]
ppp = getPPP(transition)
return(ppp)
}
getTeamTransitionPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getTransitionPPP(df=team)
return(ppp)
}
# Chunk 5: halfcourtPPP
getHalfCourtPPP = function(df=possessions, time="0:08") {
halfCourt = df[as.character(df$possession.length) > time, ]
ppp = getPPP(halfCourt)
return(ppp)
}
getTeamHalfCourtPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getHalfCourtPPP(df=team)
return(ppp)
}
# Chunk 6: assignment
getOpponentsDF = function(team_id, df=possessions) {
team = possessions[possessions$team.global.id == team_id, ]
gameCodes = unique(team$gamecode)
gamesDF = possessions[any(possessions$gamecode %in% gameCodes), ]
opponentsDF = gamesDF[gamesDF$team.global.id != team_id, ]
return(opponentsDF)
}
# Get Lakers Opponents
lakersOpponentsDF = getOpponentsDF(13)
# Print Values
paste("Lakers Transition PPP: ", getTeamTransitionPPP(13))
paste("Lakers Half Court PPP: ", getTeamHalfCourtPPP(13))
paste("Opponent Transition PPP: ", getTransitionPPP(lakersOpponentsDF))
paste("Opponent Half Court PPP: ", getHalfCourtPPP(lakersOpponentsDF))
paste("NBA Transition PPP: ", getTransitionPPP(possessions))
paste("NBA Half Court PPP: ", getHalfCourtPPP(possessions))
source('~/Projects/Sports Analytics/basketball-analytics/NBA-PPP.R')
source('~/Projects/Sports Analytics/basketball-analytics/NBA-PPP.R')
# Chunk 1
setwd("/Users/andrewtan/Projects/Sports\ Analytics/basketball-analytics")
possessions <- read.csv("box_optical_poss.csv",
header = TRUE,
sep = ",")
possessions[is.na(possessions)] <- 0
possessions = possessions[as.character(possessions$possession.length) > "0:01"]
# Chunk 2: TeamPPP
getPPP = function(df=possessions) {
n = nrow(df)
points = sum(df$points)
ppp = points / n
return(ppp)
}
getTeamPPP = function(team_id, df=possessions) {
team = df[df$team.global.id == team_id, ]
ppp = getPPP(df=team)
return(ppp)
}
# Chunk 3: TestTeamPPP
getTeamPPP(13)
# Chunk 4: transitionPPP
getTransitionPPP = function(df=possessions, time="0:08") {
transition = df[as.character(df$possession.length) <= time, ]
ppp = getPPP(transition)
return(ppp)
}
getTeamTransitionPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getTransitionPPP(df=team)
return(ppp)
}
# Chunk 5: halfcourtPPP
getHalfCourtPPP = function(df=possessions, time="0:08") {
halfCourt = df[as.character(df$possession.length) > time, ]
ppp = getPPP(halfCourt)
return(ppp)
}
getTeamHalfCourtPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getHalfCourtPPP(df=team)
return(ppp)
}
# Chunk 6: assignment
getOpponentsDF = function(team_id, df=possessions) {
team = possessions[possessions$team.global.id == team_id, ]
gameCodes = unique(team$gamecode)
gamesDF = possessions[any(possessions$gamecode %in% gameCodes), ]
opponentsDF = gamesDF[gamesDF$team.global.id != team_id, ]
return(opponentsDF)
}
# Get Lakers Opponents
lakersOpponentsDF = getOpponentsDF(13)
# Print Values
paste("Lakers Transition PPP: ", getTeamTransitionPPP(13))
paste("Lakers Half Court PPP: ", getTeamHalfCourtPPP(13))
paste("Opponent Transition PPP: ", getTransitionPPP(lakersOpponentsDF))
paste("Opponent Half Court PPP: ", getHalfCourtPPP(lakersOpponentsDF))
paste("NBA Transition PPP: ", getTransitionPPP(possessions))
paste("NBA Half Court PPP: ", getHalfCourtPPP(possessions))
# Chunk 1
setwd("/Users/andrewtan/Projects/Sports\ Analytics/basketball-analytics")
possessions <- read.csv("box_optical_poss.csv",
header = TRUE,
sep = ",")
possessions[is.na(possessions)] <- 0
possessions = possessions[as.character(possessions$possession.length) > "0:00"]
# Chunk 2: TeamPPP
getPPP = function(df=possessions) {
n = nrow(df)
points = sum(df$points)
ppp = points / n
return(ppp)
}
getTeamPPP = function(team_id, df=possessions) {
team = df[df$team.global.id == team_id, ]
ppp = getPPP(df=team)
return(ppp)
}
# Chunk 3: TestTeamPPP
getTeamPPP(13)
# Chunk 4: transitionPPP
getTransitionPPP = function(df=possessions, time="0:08") {
transition = df[as.character(df$possession.length) <= time, ]
ppp = getPPP(transition)
return(ppp)
}
getTeamTransitionPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getTransitionPPP(df=team)
return(ppp)
}
# Chunk 5: halfcourtPPP
getHalfCourtPPP = function(df=possessions, time="0:08") {
halfCourt = df[as.character(df$possession.length) > time, ]
ppp = getPPP(halfCourt)
return(ppp)
}
getTeamHalfCourtPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getHalfCourtPPP(df=team)
return(ppp)
}
# Chunk 6: assignment
getOpponentsDF = function(team_id, df=possessions) {
team = possessions[possessions$team.global.id == team_id, ]
gameCodes = unique(team$gamecode)
gamesDF = possessions[any(possessions$gamecode %in% gameCodes), ]
opponentsDF = gamesDF[gamesDF$team.global.id != team_id, ]
return(opponentsDF)
}
# Get Lakers Opponents
lakersOpponentsDF = getOpponentsDF(13)
# Print Values
paste("Lakers Transition PPP: ", getTeamTransitionPPP(13))
paste("Lakers Half Court PPP: ", getTeamHalfCourtPPP(13))
paste("Opponent Transition PPP: ", getTransitionPPP(lakersOpponentsDF))
paste("Opponent Half Court PPP: ", getHalfCourtPPP(lakersOpponentsDF))
paste("NBA Transition PPP: ", getTransitionPPP(possessions))
paste("NBA Half Court PPP: ", getHalfCourtPPP(possessions))
nrow(possessions)
# Chunk 1
setwd("/Users/andrewtan/Projects/Sports\ Analytics/basketball-analytics")
possessions <- read.csv("box_optical_poss.csv",
header = TRUE,
sep = ",")
possessions[is.na(possessions)] <- 0
possessions = possessions[as.character(possessions$possession.length) > "0:01"]
# Chunk 2: TeamPPP
getPPP = function(df=possessions) {
n = nrow(df)
points = sum(df$points)
ppp = points / n
return(ppp)
}
getTeamPPP = function(team_id, df=possessions) {
team = df[df$team.global.id == team_id, ]
ppp = getPPP(df=team)
return(ppp)
}
# Chunk 3: TestTeamPPP
getTeamPPP(13)
# Chunk 4: transitionPPP
getTransitionPPP = function(df=possessions, time="0:08") {
transition = df[as.character(df$possession.length) <= time, ]
ppp = getPPP(transition)
return(ppp)
}
getTeamTransitionPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getTransitionPPP(df=team)
return(ppp)
}
# Chunk 5: halfcourtPPP
getHalfCourtPPP = function(df=possessions, time="0:08") {
halfCourt = df[as.character(df$possession.length) > time, ]
ppp = getPPP(halfCourt)
return(ppp)
}
getTeamHalfCourtPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getHalfCourtPPP(df=team)
return(ppp)
}
# Chunk 6: assignment
getOpponentsDF = function(team_id, df=possessions) {
team = possessions[possessions$team.global.id == team_id, ]
gameCodes = unique(team$gamecode)
gamesDF = possessions[any(possessions$gamecode %in% gameCodes), ]
opponentsDF = gamesDF[gamesDF$team.global.id != team_id, ]
return(opponentsDF)
}
# Get Lakers Opponents
lakersOpponentsDF = getOpponentsDF(13)
# Print Values
paste("Lakers Transition PPP: ", getTeamTransitionPPP(13))
paste("Lakers Half Court PPP: ", getTeamHalfCourtPPP(13))
paste("Opponent Transition PPP: ", getTransitionPPP(lakersOpponentsDF))
paste("Opponent Half Court PPP: ", getHalfCourtPPP(lakersOpponentsDF))
paste("NBA Transition PPP: ", getTransitionPPP(possessions))
paste("NBA Half Court PPP: ", getHalfCourtPPP(possessions))
nrow(possessions)
# Chunk 1
setwd("/Users/andrewtan/Projects/Sports\ Analytics/basketball-analytics")
possessions <- read.csv("box_optical_poss.csv",
header = TRUE,
sep = ",")
possessions[is.na(possessions)] <- 0
possessions = possessions[as.character(possessions$possession.length) > "0:01", ]
# Chunk 2: TeamPPP
getPPP = function(df=possessions) {
n = nrow(df)
points = sum(df$points)
ppp = points / n
return(ppp)
}
getTeamPPP = function(team_id, df=possessions) {
team = df[df$team.global.id == team_id, ]
ppp = getPPP(df=team)
return(ppp)
}
# Chunk 3: TestTeamPPP
getTeamPPP(13)
# Chunk 4: transitionPPP
getTransitionPPP = function(df=possessions, time="0:08") {
transition = df[as.character(df$possession.length) <= time, ]
ppp = getPPP(transition)
return(ppp)
}
getTeamTransitionPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getTransitionPPP(df=team)
return(ppp)
}
# Chunk 5: halfcourtPPP
getHalfCourtPPP = function(df=possessions, time="0:08") {
halfCourt = df[as.character(df$possession.length) > time, ]
ppp = getPPP(halfCourt)
return(ppp)
}
getTeamHalfCourtPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getHalfCourtPPP(df=team)
return(ppp)
}
# Chunk 6: assignment
getOpponentsDF = function(team_id, df=possessions) {
team = possessions[possessions$team.global.id == team_id, ]
gameCodes = unique(team$gamecode)
gamesDF = possessions[any(possessions$gamecode %in% gameCodes), ]
opponentsDF = gamesDF[gamesDF$team.global.id != team_id, ]
return(opponentsDF)
}
# Get Lakers Opponents
lakersOpponentsDF = getOpponentsDF(13)
# Print Values
paste("Lakers Transition PPP: ", getTeamTransitionPPP(13))
paste("Lakers Half Court PPP: ", getTeamHalfCourtPPP(13))
paste("Opponent Transition PPP: ", getTransitionPPP(lakersOpponentsDF))
paste("Opponent Half Court PPP: ", getHalfCourtPPP(lakersOpponentsDF))
paste("NBA Transition PPP: ", getTransitionPPP(possessions))
paste("NBA Half Court PPP: ", getHalfCourtPPP(possessions))
# Chunk 1
setwd("/Users/andrewtan/Projects/Sports\ Analytics/basketball-analytics")
possessions <- read.csv("box_optical_poss.csv",
header = TRUE,
sep = ",")
possessions[is.na(possessions)] <- 0
possessions = possessions[as.character(possessions$possession.length) > "0:00", ]
# Chunk 2: TeamPPP
getPPP = function(df=possessions) {
n = nrow(df)
points = sum(df$points)
ppp = points / n
return(ppp)
}
getTeamPPP = function(team_id, df=possessions) {
team = df[df$team.global.id == team_id, ]
ppp = getPPP(df=team)
return(ppp)
}
# Chunk 3: TestTeamPPP
getTeamPPP(13)
# Chunk 4: transitionPPP
getTransitionPPP = function(df=possessions, time="0:08") {
transition = df[as.character(df$possession.length) <= time, ]
ppp = getPPP(transition)
return(ppp)
}
getTeamTransitionPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getTransitionPPP(df=team)
return(ppp)
}
# Chunk 5: halfcourtPPP
getHalfCourtPPP = function(df=possessions, time="0:08") {
halfCourt = df[as.character(df$possession.length) > time, ]
ppp = getPPP(halfCourt)
return(ppp)
}
getTeamHalfCourtPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getHalfCourtPPP(df=team)
return(ppp)
}
# Chunk 6: assignment
getOpponentsDF = function(team_id, df=possessions) {
team = possessions[possessions$team.global.id == team_id, ]
gameCodes = unique(team$gamecode)
gamesDF = possessions[any(possessions$gamecode %in% gameCodes), ]
opponentsDF = gamesDF[gamesDF$team.global.id != team_id, ]
return(opponentsDF)
}
# Get Lakers Opponents
lakersOpponentsDF = getOpponentsDF(13)
# Print Values
paste("Lakers Transition PPP: ", getTeamTransitionPPP(13))
paste("Lakers Half Court PPP: ", getTeamHalfCourtPPP(13))
paste("Opponent Transition PPP: ", getTransitionPPP(lakersOpponentsDF))
paste("Opponent Half Court PPP: ", getHalfCourtPPP(lakersOpponentsDF))
paste("NBA Transition PPP: ", getTransitionPPP(possessions))
paste("NBA Half Court PPP: ", getHalfCourtPPP(possessions))
sum(possessions[as.character(possessions$possession.length) == "0:00", ]$points)
sum(possessions[as.character(possessions$possession.length) == "0:01", ]$points)
sum(possessions[as.character(possessions$possession.length) == "0:02", ]$points)
sum(possessions[as.character(possessions$possession.length) == "0:12", ]$points)
sum(possessions[as.character(possessions$possession.length) == "0:24", ]$points)
sum(possessions[as.character(possessions$possession.length) == "0:30", ]$points)
source('~/Projects/Sports Analytics/basketball-analytics/NBA-PPP.R')
# Load data into dataframe `possessions`
setwd("/Users/andrewtan/Projects/Sports\ Analytics/basketball-analytics")
possessions <- read.csv("box_optical_poss.csv",
header = TRUE,
sep = ",")
possessions[is.na(possessions)] <- 0
possessions = possessions[as.character(possessions$possession.length) > "0:00", ]
# PPP Main Functions
getPPP = function(df=possessions) {
n = nrow(df)
points = sum(df$points)
ppp = points / n
return(ppp)
}
getTeamPPP = function(team_id, df=possessions) {
team = df[df$team.global.id == team_id, ]
ppp = getPPP(df=team)
return(ppp)
}
## Transition PPP Helper Functions
getTransitionPPP = function(df=possessions, time="0:08") {
transition = df[as.character(df$possession.length) <= time, ]
ppp = getPPP(transition)
return(ppp)
}
getTeamTransitionPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getTransitionPPP(df=team)
return(ppp)
}
## Half Court PPP Helper Functions
getHalfCourtPPP = function(df=possessions, time="0:08") {
halfCourt = df[as.character(df$possession.length) > time, ]
ppp = getPPP(halfCourt)
return(ppp)
}
getTeamHalfCourtPPP = function(team_id, df=possessions, time="0:08") {
team = df[df$team.global.id == team_id, ]
ppp = getHalfCourtPPP(df=team)
return(ppp)
}
## Assignment
# Get the transition and halfcourt PPP of:
# 1. Lakers
# 2. Opponents
# 3. NBA Average
getOpponentsDF = function(team_id, df=possessions) {
team = possessions[possessions$team.global.id == team_id, ]
gameCodes = unique(team$gamecode)
gamesDF = possessions[any(possessions$gamecode %in% gameCodes), ]
opponentsDF = gamesDF[gamesDF$team.global.id != team_id, ]
return(opponentsDF)
}
# Get Lakers Opponents
lakersOpponentsDF = getOpponentsDF(13)
# Print Values
paste("Lakers Transition PPP: ", getTeamTransitionPPP(13))
paste("Lakers Half Court PPP: ", getTeamHalfCourtPPP(13))
paste("Opponent Transition PPP: ", getTransitionPPP(lakersOpponentsDF))
paste("Opponent Half Court PPP: ", getHalfCourtPPP(lakersOpponentsDF))
paste("NBA Transition PPP: ", getTransitionPPP(possessions))
paste("NBA Half Court PPP: ", getHalfCourtPPP(possessions))
